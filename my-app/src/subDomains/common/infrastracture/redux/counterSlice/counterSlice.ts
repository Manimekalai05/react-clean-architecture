import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store/store';
import { CounterState } from '../../../../counter/domain/entities/CounterState';
import { complexUseCaseAsync } from './counterActions';

const initialState: CounterState = {
  value: 0,
  status: 'idle',
  isLoading: false,
};

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    //ovo nas interesuje
    setCounterState : (state, action) => {
      return { ...state, ...action.payload };
    },
    //ovo leti?
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      debugger;
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      debugger;
      state.status = 'idle';
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(complexUseCaseAsync.pending, (state) => {
        state.status = 'loading';
        state.isLoading = true;
      })
      .addCase(complexUseCaseAsync.fulfilled, (state) => {
        state.status = 'idle';
        state.isLoading = false;
      })
      .addCase(complexUseCaseAsync.rejected, (state) => {
        state.status = 'failed';
        state.isLoading = false;
      })
  },
});

export const { increment, decrement, incrementByAmount, setCounterState } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

export const selectCounterStateCopy = (state: RootState) : CounterState => { 
  const counter = { ...state.counter }; //ovde je odgovornost da se kopira state
  return counter;
}

export default counterSlice.reducer;
